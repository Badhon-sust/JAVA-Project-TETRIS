package com.salifm.tetris;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.*;

import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.JOptionPane;
import  javax.swing.UIManager;

import com.salifm.tetris.Tetromino.Tetrominoes;

public class GameBoardPanel extends JPanel implements ActionListener {
    private static final int BoardWidth = 10;    // game board x size
    private static final int BoardHeight = 22;    // game board y size

    // game status & timer
    private Timer timer;
    private boolean isFallingDone = false;
    private boolean isStarted = false;
    private boolean isPaused = false;
    private int currentScore = 0; // removed lines == score

    // position of current block
    private int curX = 0;
    private int curY = 0;

    // current tetromino
    private Tetromino curBlock;

    // logical game block
    private Tetrominoes[] gameBoard;
    private Color[] colorTable;

    // adjusting game status
    private String currentStatus;
    private String currentLevel;
    private int currentTimerResolution;
    
    
    
    private GameWindow tetrisFrameD;


    public GameBoardPanel(GameWindow tetrisFrame, int timerResolution) {

        setFocusable(true);
        setBackground(new Color(0, 30, 30));
        curBlock = new Tetromino();
        timer = new Timer(timerResolution, this);
        timer.start();    // activate timer
        currentTimerResolution = timerResolution;

        gameBoard = new Tetrominoes[BoardWidth * BoardHeight];

        // colour of tetrominoes
        colorTable = new Color[]{
                new Color(0, 0, 0), new Color(164, 135, 255),
                new Color(255, 128, 0), new Color(255, 0, 0),
                new Color(32, 128, 255), new Color(255, 0, 255),
                new Color(255, 255, 0), new Color(0, 255, 0)
        };

        // keyboard listener
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (!isStarted || curBlock.getShape() == Tetrominoes.NO_BLOCK) {
                    return;
                }

                int keycode = e.getKeyCode();

                if (keycode == 'p' || keycode == 'P') {
                    pause();
                    return;
                }

                if (isPaused) {
                    return;
                }

                switch (keycode) {
                    case 'a':
                    case 'A':
                    case KeyEvent.VK_LEFT:
                        isMovable(curBlock, curX - 1, curY);
                        break;
                    case 'd':
                    case 'D':
                    case KeyEvent.VK_RIGHT:
                        isMovable(curBlock, curX + 1, curY);
                        break;
                    case 'w':
                    case 'W':
                    case KeyEvent.VK_UP:
                        isMovable(curBlock.rotateRight(), curX, curY);
                        break;
                    case 's':
                    case 'S':
                    case KeyEvent.VK_DOWN:
                        advanceOneLine();
                        break;
                    case KeyEvent.VK_SPACE:
                        advanceToEnd();
                        break;
                    case 'p':
                    case 'P':
                        pause();
                        break;
                }

            }
        });

        tetrisFrameD = tetrisFrame;
        initBoard();
    }
    
    // adjusting game level
    private void setResolution() {
        // fix me later! it's lame :P"

        switch (currentScore / 10) {
            case 10:
                currentTimerResolution = 100;
                break;
            case 9:
                currentTimerResolution = 130;
                break;
            case 8:
                currentTimerResolution = 160;
                break;
            case 7:
                currentTimerResolution = 190;
                break;
            case 6:
                currentTimerResolution = 220;
                break;
            case 5:
                currentTimerResolution = 250;
                break;
            case 4:
                currentTimerResolution = 280;
                break;
            case 3:
                currentTimerResolution = 310;
                break;
            case 2:
                currentTimerResolution = 340;
                break;
            case 1:
                currentTimerResolution = 370;
                break;
            case 0:
                currentTimerResolution = 370;
                break;
        }

        timer.setDelay(currentTimerResolution);

    }

    // initialize game board
    private void initBoard() {
        for (int i = 0; i < BoardWidth * BoardHeight; i++) {
            gameBoard[i] = Tetrominoes.NO_BLOCK;
        }
    }

    // timer callback
    @Override
    public void actionPerformed(ActionEvent e) {
        if (isFallingDone) {
            isFallingDone = !isFallingDone; // toggle status
            newTetromino();
        } else {
            advanceOneLine();
        }
    }

    public void start() {
        if (isPaused) {
            return;
        }

        isStarted = true;
        isFallingDone = false;
        currentScore = 0;
        initBoard();

        newTetromino();
        timer.start();
    }

    public void pause() {
        if (!isStarted) {
            return;
        }

        isPaused = !isPaused;
        if (isPaused) {
            timer.stop();
        } else {
            timer.start();
        }

        repaint();
    }

